{"version":3,"sources":["context/AppReducer.tsx","component/Header.tsx","context/GlobalState.tsx","component/Balance.tsx","component/IncomeExpenses.tsx","component/Transaction.tsx","component/TransactionList.tsx","component/AddTransaction.tsx","db.tsx","App.tsx","index.tsx"],"names":["Types","Header","initialState","transactionReducer","state","action","type","Create","payload","Delete","filter","transaction","id","transactions","JSON","parse","localStorage","getItem","GlobalContext","createContext","dispatch","mainReducer","GlobalProvider","children","useReducer","Provider","value","Balance","total","useContext","map","amount","reduce","prevVal","nextVal","toFixed","IncomeExpenses","income","expense","el","className","Transaction","text","Math","abs","onClick","e","TransactionList","transactionList","AddTransaction","createTransaction","useState","setText","setAmount","preventDefault","newTransaction","length","useEffect","data","setItem","stringify","onSubmit","htmlFor","name","onChange","target","placeholder","valueAsNumber","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d80a3e4.chunk.js","sourcesContent":["import { TransactionState } from \"../context/GlobalState\";\r\n\r\n//   types\r\nexport enum Types {\r\n  Create = \"CREATE_TRANSACTION\",\r\n  Delete = \"DELETE_TRANSACTION\",\r\n}\r\n\r\n//   actions\r\nexport type TransactionActions =\r\n  | { type: Types.Create; payload: TransactionState }\r\n  | { type: Types.Delete; id: number };\r\n\r\nexport const transactionReducer = (\r\n  state: TransactionState[],\r\n  action: TransactionActions\r\n) => {\r\n  switch (action.type) {\r\n    case Types.Create:\r\n      return [{ ...action.payload }, ...state];\r\n\r\n    case Types.Delete:\r\n      return [\r\n        ...state.filter(\r\n          (transaction: TransactionState) => transaction.id !== action.id\r\n        ),\r\n      ];\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\n\r\nconst Header: React.FC = () => {\r\n  return <h1>Expense Tracker</h1>;\r\n};\r\n\r\nexport default Header;\r\n","import React, { createContext, useReducer, Dispatch } from \"react\";\r\nimport { TransactionActions, transactionReducer } from \"./AppReducer\";\r\n\r\n// interface\r\nexport type TransactionState = {\r\n  id: number;\r\n  text: string;\r\n  amount: number;\r\n};\r\n\r\nexport type TransactionObject = {\r\n  transactions: TransactionState[];\r\n};\r\n// initialState\r\nlet initialState: TransactionObject;\r\ninitialState = {\r\n  transactions: JSON.parse(localStorage.getItem(\"transactions\") || \"[]\"),\r\n};\r\n\r\n// Create Context\r\nexport const GlobalContext = createContext<{\r\n  state: TransactionObject;\r\n  dispatch: Dispatch<TransactionActions>;\r\n}>({\r\n  state: initialState,\r\n  dispatch: () => null,\r\n});\r\n\r\n// global reducer\r\nconst mainReducer = (\r\n  { transactions }: TransactionObject,\r\n  action: TransactionActions\r\n) => ({\r\n  transactions: transactionReducer(transactions, action),\r\n});\r\n\r\n// Provider component\r\nexport const GlobalProvider: React.FC = ({ children }) => {\r\n  const [state, dispatch] = useReducer(mainReducer, initialState);\r\n  return (\r\n    <GlobalContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\n\r\nconst Balance = () => {\r\n  const {\r\n    state: { transactions },\r\n  } = useContext(GlobalContext);\r\n  let amount: number[] = [];\r\n  let total: number;\r\n  amount = transactions.map(({ amount }) => amount);\r\n  total = amount.reduce((prevVal, nextVal) => prevVal + nextVal, 0);\r\n\r\n  return (\r\n    <>\r\n      <h4>Your Balance</h4>\r\n      <h1>${total.toFixed(2)}</h1>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Balance;\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\n\r\nconst IncomeExpenses = () => {\r\n  const {\r\n    state: { transactions },\r\n  } = useContext(GlobalContext);\r\n  let income: number;\r\n  let expense: number;\r\n  income = transactions\r\n    .map((el) => el.amount)\r\n    .filter((amount) => amount > -1)\r\n    .reduce((prevVal, nextVal) => prevVal + nextVal, 0);\r\n  expense =\r\n    transactions\r\n      .map((el) => el.amount)\r\n      .filter((amount) => amount < 0)\r\n      .reduce((prevVal, nextVal) => prevVal + nextVal, 0) * -1;\r\n\r\n  return (\r\n    <div className=\"inc-exp-container\">\r\n      <div>\r\n        <h4>Income</h4>\r\n        <p className=\"money plus\">+${income.toFixed(2)}</p>\r\n      </div>\r\n      <div>\r\n        <h4>Expense</h4>\r\n        <p className=\"money minus\">-${expense.toFixed(2)}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IncomeExpenses;\r\n","import React, { useContext } from \"react\";\r\nimport { TransactionState, GlobalContext } from \"../context/GlobalState\";\r\nimport { Types } from \"../context/AppReducer\";\r\n\r\nconst Transaction: React.FC<TransactionState> = ({ text, amount, id }) => {\r\n  const { dispatch } = useContext(GlobalContext);\r\n\r\n  const deleteTransactionByID = (e: React.MouseEvent) => {\r\n    dispatch({\r\n      type: Types.Delete,\r\n      id,\r\n    });\r\n  };\r\n  return (\r\n    <li className={`${amount < 0 ? \"minus\" : \"plus\"}`}>\r\n      {text}{\" \"}\r\n      <span>\r\n        {amount < 0 ? \"-\" : \"+\"}${Math.abs(amount)}\r\n      </span>\r\n      <button className=\"delete-btn\" onClick={deleteTransactionByID}>\r\n        x\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Transaction;\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\nimport { TransactionState } from \"../context/GlobalState\";\r\nimport Transaction from \"./Transaction\";\r\n\r\nconst TransactionList = () => {\r\n  const {\r\n    state: { transactions },\r\n  } = useContext(GlobalContext);\r\n  // transaction list output\r\n  const transactionList = transactions.map((el: TransactionState) => (\r\n    <Transaction key={el.id} id={el.id} text={el.text} amount={el.amount} />\r\n  ));\r\n  return (\r\n    <>\r\n      <h3>History</h3>\r\n      <ul className=\"list\">{transactionList}</ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TransactionList;\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { Types } from \"../context/AppReducer\";\r\nimport { GlobalContext, TransactionState } from \"../context/GlobalState\";\r\nimport { saveToLocalStorage } from \"../db\";\r\nconst AddTransaction = () => {\r\n  const [text, setText] = useState<string>(\"\");\r\n  const [amount, setAmount] = useState<number>(0);\r\n  const {\r\n    dispatch,\r\n    state: { transactions },\r\n  } = useContext(GlobalContext);\r\n\r\n  let createTransaction: (e: React.FormEvent) => void;\r\n  createTransaction = (e) => {\r\n    e.preventDefault();\r\n\r\n    const newTransaction = {\r\n      id: transactions.length\r\n        ? transactions[transactions.length - 1].id + 1\r\n        : 0,\r\n      text,\r\n      amount,\r\n    };\r\n    dispatch({ type: Types.Create, payload: newTransaction });\r\n    setText(\"\");\r\n    setAmount(0);\r\n  };\r\n\r\n  useEffect(() => {\r\n    saveToLocalStorage(transactions);\r\n  }, [transactions]);\r\n\r\n  return (\r\n    <>\r\n      <h3>Add new transaction</h3>\r\n      <form onSubmit={createTransaction}>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"text\">Text</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"text\"\r\n            value={text}\r\n            onChange={(e) => setText(e.target.value)}\r\n            placeholder=\"Enter text....\"\r\n          />\r\n        </div>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"amount\">\r\n            Amount <br />\r\n            (negative - expense, positive - income)\r\n          </label>\r\n          <input\r\n            type=\"number\"\r\n            name=\"amount\"\r\n            value={amount}\r\n            onChange={(e) => setAmount(e.target.valueAsNumber)}\r\n            placeholder=\"Enter amount....\"\r\n          />\r\n        </div>\r\n        <button className=\"btn\">Add transaction</button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddTransaction;\r\n","import { TransactionState } from \"./context/GlobalState\";\r\nexport const saveToLocalStorage = (data: TransactionState[]) => {\r\n  let transactions = JSON.parse(localStorage.getItem(\"transactions\") || \"[]\");\r\n  if (!transactions.length) {\r\n    localStorage.setItem(\"transactions\", JSON.stringify(data));\r\n  } else {\r\n    localStorage.setItem(\"transactions\", JSON.stringify(data));\r\n  }\r\n};\r\n","import React from \"react\";\n// styling\nimport \"./App.css\";\n\n// components\nimport Header from \"./component/Header\";\nimport Balance from \"./component/Balance\";\nimport IncomeExpenses from \"./component/IncomeExpenses\";\nimport TransactionList from \"./component/TransactionList\";\nimport AddTransaction from \"./component/AddTransaction\";\n// context api\nimport { GlobalProvider } from \"./context/GlobalState\";\nimport { saveToLocalStorage } from \"./db\";\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <Header />\n      <div className=\"container\">\n        <Balance />\n        <IncomeExpenses />\n        <TransactionList />\n        <AddTransaction />\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}